{
	"info": {
		"_postman_id": "0f1de691-4b2d-4ff4-ae6a-72108da504e7",
		"name": "Collection for the code",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31841097"
	},
	"item": [
		{
			"name": "localhost:5000/profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - department, designation, and employee\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('department');\r",
							"        pm.expect(item).to.have.property('designation');\r",
							"        pm.expect(item).to.have.property('employee');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(profile) {\r",
							"    pm.expect(profile).to.have.property('employee');\r",
							"    pm.expect(profile.employee).to.have.property('email').that.is.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"First name and last name are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.employee.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
							"    pm.expect(item.employee.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"department\": \"Sales\",\r\n        \"designation\": \"Sales Head\",\r\n        \"employee\": {\r\n            \"firstName\": \"Henry\",\r\n            \"lastname\": \"Pet\",\r\n            \"email\": \"henriques99@gmail.com\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/profiles",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"profiles"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/profiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Employee object structure is valid\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(profile) {\r",
							"    pm.expect(profile.employee).to.exist.and.to.be.an('object');\r",
							"    pm.expect(profile.employee.firstName).to.be.a('string');\r",
							"    pm.expect(profile.employee.lastName).to.be.a('string');\r",
							"    pm.expect(profile.employee.email).to.be.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Department and designation are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(profile) {\r",
							"        pm.expect(profile).to.have.property('department').that.is.a('string').and.is.not.empty;\r",
							"        pm.expect(profile).to.have.property('designation').that.is.a('string').and.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(profile) {\r",
							"        pm.expect(profile.employee.email).to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/profiles",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"profiles"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/profiles/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is 'text/xml'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the requested profile with ID 1 is deleted\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/profiles/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"profiles",
						"1"
					]
				}
			},
			"response": []
		}
	]
}